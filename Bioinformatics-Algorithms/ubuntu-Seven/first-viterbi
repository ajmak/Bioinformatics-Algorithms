sequence alignment with profile hmm problem

issue of dealing with theta

building the graph:

need to add to the set of symbols the start and end symbols (could use '!')
length of the graph is hmm state (M1,D1,I1) etc

cosntructing the viterbi graph
    taking state sets - building graph in book with insert row at top and delete at left
    viterbi cell - m,d,i as a grouping --repeated element
    use size of number of elements in state sets

Once we get close to underflow in std python math - results may become non-deterministic - can't maked ecisions based on
     use numpy math for all of the calculations
     certainly all of the math in the viterbi graph
     use 128 bit float if possible

Data structures for viterbi graph
     dictionary of node objects - knows current and prev states
     constructed as a mesh --> connects cells (cell is collection of 3 nodes)
     		 constructed this way - look at how to link these things together, from every cell to every other cell up link and left link can get anywhere you need
		 two dimensional array of related nodes
		 reference up and reference left
		 making an assignment to an object - all assignments are pointers
		 
in case of profile HMM - know dimensions from multiple alignment and width is the sequence we've defined
   can recalculate topological order

dictionary of dictionaries - use named tuples - all behavior of tuples but can refer to contents as a name instead of index so can refer to cell at M or cell at D 
can build 2 dimensional array - objects of cells where each cell has all 3 values - place tuples into here

can build 3 different arrays - one for match, insert, delete

all make you able to keep track of 3 different values and can keep track of predecessor states - predecessor states are always in your own column and above or in the previous column
    have to be careful that are on upper left order --> typically negative infinity
    be lever with your initializations so your calculations will never use that so the computations will never find that value
    column 0 looks just like col 1 except that match and insert states aren't used in the col 0  - set match and inserts to -inf
    	   in any of the max operations - would never come up with match or insert to avoid if statements

another thing to remember - we are calculating in the forward direction - that is the dynamic programming step
	what we want is the answer at the end - backtrack from that answer
	every symbol is presented to every state of the HMM
	all of these states must emit a symbol - delete states have to be dealth with a single column since we're skipping cells
	if you want you can keep backtracking pointers at every node - where did maximal value come from
	   instead - do backtracking using argmax - recompute way

how to implement delete states
    there is no emission for delete
    can put one in a emission table 