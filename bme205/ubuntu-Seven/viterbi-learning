max is replaced by sum and spread out matrix multiply

maximize probability of the returned path given the seq

build transition state from into however many states are present in our transition
= [{s:self.emission[s][outcome[0]]/len(self.states) for s in self.states}]
 builds a list of dicts where each dict corresponds to a symbol being output --> number of states that are present are the number given (alphabet)
 	modeled by keys in the dict
	can factor out emission and the emission table is indexed by k (time slot in) and c(emitted symbol) ^^that's what the dict comprehension is
	for c in outcome[1:]:
	    v.append({
			k:self.emision[k][c] * max([v[-1][l]*self.transition[l][k] for l in self.states]) for k in self. states})
	pi = [self.argMax(v[=1])]
	for i in range(lenv)=1,0,-1):
	    k = pi[0]
	    pi[0:0] = self.argMax({l:v[i-1][l]*self.transition[l]k[] for l in self.states})
	    return ''.join(pi), max(vp[-1].values

builds by inserting to the front of the states - v is just a dict of states/probabilities
k is an iteration of states that are from states
transitioning from state l to state k
this is the front half of the viterbi

possible paths - don't put in start state - just write what initial state will look like

the traceback deals with argMax --> ie dictionary - what interested in what key is associated with the maximum value
    amax = 0.0
    maxKey = None
    for key,value in d.items():
    	if value >=amax:
	   maxKey = key
	   amakx = value
    return maxKEy

tracback caluclates optimal path pi - works from starting at the end 